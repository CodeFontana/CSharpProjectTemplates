@using System.Linq.Expressions

@*
Sample usage:
<BSInputCheck Id="isMeltdownImminent" Label="Meltdown Imminent" LabelClass="form-control form-switch mb-3" @bind-Value="_reactor.meltdownImminent" Disabled="@_isRequesting" />
<BSInputCheck Id="IsCriticalAlarm" Label="Critical Alarm" LabelClass="form-control form-switch" LabelStyle="width: auto;" @bind-Value="@_isCriticalAlarm" Disabled="@IsProcessing" />
*@

<label class="@($"{LabelClass}")" style="@LabelStyle">
    <InputCheckbox id="@Id"
                   class="form-check-input me-2"
                   Value="@Value"
                   ValueChanged="ValueChanged"
                   ValueExpression="ValueExpression"
                   @oninput="OnInput"
                   @onfocus="OnFocus"
                   @onblur="OnBlur"
                   @onclick="OnClick"
                   @onchange="OnChange"
                   @onmouseover="OnMouseOver"
                   @onmouseout="OnMouseOut"
                   Disabled="@Disabled"
                   style="@(LabelClass?.ToLower().Contains("form-switch") ?? false ? $"margin-left: -2em; {InputStyle}" : InputStyle)" />

    @if (string.IsNullOrWhiteSpace(Label) == false)
    {
        @Label
    }
</label>

@code {
    [Parameter]
    public string? LabelClass { get; set; }

    [Parameter]
    public string LabelStyle { get; set; } = "";

    [Parameter]
    public string InputStyle { get; set; } = "";

    [Parameter]
    public string? Label { get; set; }

    [Parameter, EditorRequired]
    public required string Id { get; set; }

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<bool>>? ValueExpression { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnInput { get; set; }

    [Parameter]
    public EventCallback<FocusEventArgs> OnFocus { get; set; }

    [Parameter]
    public EventCallback<FocusEventArgs> OnBlur { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOver { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOut { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;
}