@using System.Linq.Expressions

@*
Sample usage:
<BSInputTextArea Id="textArea" Class="mb-3" InputType="InputType.Standard" @bind-Value="@_demo" Label="TextArea" Placeholder="All work and no play..." Rows="3" Disabled="_isRequesting" />
<BSInputTextArea Id="textArea" Class="mb-3" InputType="InputType.InputGroup" @bind-Value="@_demo" Label="TextArea" Placeholder="All work and no play..." Rows="3" Disabled="_isRequesting" />
<BSInputTextArea Id="textArea" Class="mb-3" InputType="InputType.FloatingLabel" @bind-Value="@_demo" Label="TextArea" Rows="3" Disabled="_isRequesting" />
*@

@if (InputType == InputType.Standard)
{
    <div class="@Class">
        <label for="@Id" class="form-label mb-0" style="@($"width: {LabelWidth}px;")">@Label</label>
        <InputTextArea id="@Id"
                       class="form-control"
                       rows="@Rows"
                       Value="@Value"
                       ValueChanged="ValueChanged"
                       ValueExpression="ValueExpression"
                       placeholder="@Placeholder"
                       @oninput="OnInput"
                       @onfocus="OnFocus"
                       @onblur="OnBlur"
                       @onclick="OnClick"
                       @onchange="OnChange"
                       @onmouseover="OnMouseOver"
                       @onmouseout="OnMouseOut"
                       Disabled="@Disabled" />
    </div>
}
else if (InputType == InputType.InputGroup)
{
    <div class="input-group @Class">
        <span class="input-group-text" style="@($"width: {LabelWidth}px;")">@Label</span>
        <InputTextArea id="@Id"
                       class="form-control"
                       rows="@Rows"
                       Value="@Value"
                       ValueChanged="ValueChanged"
                       ValueExpression="ValueExpression"
                       placeholder="@Placeholder"
                       @oninput="OnInput"
                       @onfocus="OnFocus"
                       @onblur="OnBlur"
                       @onclick="OnClick"
                       @onchange="OnChange"
                       @onmouseover="OnMouseOver"
                       @onmouseout="OnMouseOut"
                       Disabled="@Disabled" />
    </div>
}
else if (InputType == InputType.FloatingLabel)
{
    <div class="@($"form-floating {Class}")">
        <InputTextArea id="@Id"
                       class="form-control"
                       rows="@Rows"
                       style="height: unset"
                       Value="@Value"
                       ValueChanged="ValueChanged"
                       ValueExpression="ValueExpression"
                       placeholder="@Placeholder"
                       @oninput="OnInput"
                       @onfocus="OnFocus"
                       @onblur="OnBlur"
                       @onclick="OnClick"
                       @onchange="OnChange"
                       @onmouseover="OnMouseOver"
                       @onmouseout="OnMouseOut"
                       Disabled="@Disabled" />
        <label for="@Id">@Label</label>
    </div>
}

@if (EditContext != null)
{
    <ValidationMessage For="@ValueExpression" class="text-danger validation-spacing" />
}

@code {
    [CascadingParameter]
    private EditContext? EditContext { get; set; }

    [Parameter]
    public InputType InputType { get; set; } = InputType.Standard;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public required string Label { get; set; }

    [Parameter]
    public ushort LabelWidth { get; set; } = 150;

    [Parameter]
    public ushort Rows { get; set; } = 10;

    [Parameter, EditorRequired]
    public required string Id { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<string>>? ValueExpression { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnInput { get; set; }

    [Parameter]
    public EventCallback<FocusEventArgs> OnFocus { get; set; }

    [Parameter]
    public EventCallback<FocusEventArgs> OnBlur { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOver { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOut { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public string? Placeholder { get; set; }
}
