@using System.Linq.Expressions
@typeparam T

@*
Sample usage:

<h4>Planets</h4>

<div>
    <BSInputSelect Id="planetFilter" Class="mb-3" Label="Planet Filter" LabelWidth="150" InputType="InputType.Standard" FitContent="true" @bind-Value="SelectedPlanet" Disabled="@_isRequesting">
        <option value="">Select...</option>
        @foreach (var planet in _planets)
        {
            <option value="@($"{planet.PlanetKey}/{planet.PlanetName}")">@planet.PlanetName</option>
        }
    </BSInputSelect>
</div>

<div>
    <BSInputSelect Id="planetFilter" Class="mb-3" Label="Planet Filter" LabelWidth="150" InputType="InputType.InputGroup" FitContent="true" @bind-Value="SelectedPlanet" Disabled="@_isRequesting">
        <option value="">Select...</option>
        @foreach (var planet in _planets)
        {
            <option value="@($"{planet.PlanetKey}/{planet.PlanetName}")">@planet.PlanetName</option>
        }
    </BSInputSelect>
</div>

<div>
    <BSInputSelect Id="planetFilter" Class="mb-3" Label="Planet Filter" LabelWidth="150" InputType="InputType.FloatingLabel" FitContent="true" @bind-Value="SelectedPlanet" Disabled="@_isRequesting">
        <option value="">Select...</option>
        @foreach (var planet in _planets)
        {
            <option value="@($"{planet.PlanetKey}/{planet.PlanetName}")">@planet.PlanetName</option>
        }
    </BSInputSelect>
</div>

<p>Selected planet: @(_selectedPlanet)</p>

@code {
    private bool _isRequesting = false;

    record Planet (string PlanetKey, string PlanetName);

    private List<Planet> _planets = new()
    {
        new Planet("1", "Mercury"),
        new Planet("2", "Venus"),
        new Planet("3", "Earth"),
        new Planet("4", "Mars"),
        new Planet("5", "Jupiter"),
        new Planet("6", "Saturn"),
        new Planet("7", "Uranus"),
        new Planet("8", "Neptune"),
        new Planet("9", "Pluto")
    };

    private string _selectedPlanet = string.Empty;
    private string SelectedPlanet
    {
        get => _selectedPlanet;
        set
        {
            _selectedPlanet = value;
        }
    }
}

*@

@if (InputType == InputType.Standard)
{
    <div class="@($"{Class}")" style="@($"{Style}")">
        <label for="@Id" class="form-label mb-0" style="@($"width: {LabelWidth}px; {LabelStyle}")">@Label</label>
        <InputSelect id="@Id"
                     class="form-select"
                     style="@(FitContent ? $"width: auto; {@InputStyle}" : @InputStyle)"
                     Value="@Value"
                     ValueChanged="ValueChanged"
                     ValueExpression="ValueExpression"
                     @oninput="OnInput"
                     @onfocus="OnFocus"
                     @onblur="OnBlur"
                     @onclick="OnClick"
                     @onchange="OnChange"
                     @onmouseover="OnMouseOver"
                     @onmouseout="OnMouseOut"
                     Disabled="@Disabled">
            @if (ChildContent != null)
            {
                @ChildContent
            }
        </InputSelect>
    </div>
}
else if (InputType == InputType.InputGroup)
{
    <div class="@($"input-group d-{(FitContent ? "inline-flex flex-nowrap" : "flex")} align-items-center {Class}")" style="@(FitContent ? $"width: auto; {Style}" : Style)">
        <span class="input-group-text" style="@($"width: {LabelWidth}px; {LabelStyle}")">@Label</span>
        <InputSelect id="@Id"
                     class="form-select"
                     Value="@Value"
                     ValueChanged="ValueChanged"
                     ValueExpression="ValueExpression"
                     @oninput="OnInput"
                     @onfocus="OnFocus"
                     @onblur="OnBlur"
                     @onclick="OnClick"
                     @onchange="OnChange"
                     @onmouseover="OnMouseOver"
                     @onmouseout="OnMouseOut"
                     Disabled="@Disabled"
                     style="@InputStyle">
            @if (ChildContent != null)
            {
                @ChildContent
            }
        </InputSelect>
    </div>
}
else if (InputType == InputType.FloatingLabel)
{
    <div class="@($"form-floating d-{(FitContent ? "inline-block" : "block")} {Class}")" style="@($"{Style}")">
        <InputSelect id="@Id"
                     class="form-select"
                     Value="@Value"
                     ValueChanged="ValueChanged"
                     ValueExpression="ValueExpression"
                     @oninput="OnInput"
                     @onfocus="OnFocus"
                     @onblur="OnBlur"
                     @onclick="OnClick"
                     @onchange="OnChange"
                     @onmouseover="OnMouseOver"
                     @onmouseout="OnMouseOut"
                     Disabled="@Disabled"
                     style=@($"width: {LabelWidth}px; {InputStyle}")>
            @if (ChildContent != null)
            {
                @ChildContent
            }
        </InputSelect>
        <label for="@Id" style="@LabelStyle">@Label</label>
    </div>
}

@if (EditContext != null)
{
    <ValidationMessage For="@ValueExpression" class="text-danger validation-spacing" />
}

@code {
    [CascadingParameter]
    private EditContext? EditContext { get; set; }

    [Parameter]
    public InputType InputType { get; set; } = InputType.InputGroup;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public required string Label { get; set; }

    [Parameter]
    public ushort LabelWidth { get; set; } = 150;

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public string LabelStyle { get; set; } = "";

    [Parameter]
    public string InputStyle { get; set; } = "";

    [Parameter, EditorRequired]
    public required string Id { get; set; }

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public EventCallback<T?> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<T?>>? ValueExpression { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnInput { get; set; }

    [Parameter]
    public EventCallback<FocusEventArgs> OnFocus { get; set; }

    [Parameter]
    public EventCallback<FocusEventArgs> OnBlur { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOver { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOut { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool FitContent { get; set; } = false;

    [Parameter, EditorRequired]
    public required RenderFragment ChildContent { get; set; }
}
