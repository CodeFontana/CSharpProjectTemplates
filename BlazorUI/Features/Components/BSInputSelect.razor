@using System.Linq.Expressions
@typeparam T

@*
Sample usage:
<BSInputSelect Id="myId" Class="mb-3" Label="My Label" LabelWidth="150" InputType="InputType.InputGroup" FitContent="true" @bind-Value="SelectedItem">
    <option value="">All</option>
    @foreach (var option in _options)
    {
        <option value="value">Name</option>
    }
</BSInputSelect>
*@

@if (InputType == InputType.Standard)
{
    <div class="@($"{Class}")">
        <label for="@Id" class="form-label mb-0" style="@($"width: {LabelWidth}px;")">@Label</label>
        <InputSelect id="@Id"
                     class="form-select"
                     style="@(FitContent ? "width: auto;" : "")"
                     Value="@Value"
                     ValueChanged="ValueChanged"
                     ValueExpression="ValueExpression"
                     @oninput="OnInput"
                     @onfocus="OnFocus"
                     @onblur="OnBlur"
                     @onclick="OnClick"
                     @onchange="OnChange"
                     @onmouseover="OnMouseOver"
                     @onmouseout="OnMouseOut"
                     Disabled="@Disabled">
            @if (ChildContent != null)
            {
                @ChildContent
            }
        </InputSelect>
    </div>
}
else if (InputType == InputType.InputGroup)
{
    <div class="@($"input-group d-{(FitContent ? "inline-flex" : "flex")} align-items-center {Class}")" style="@(FitContent ? "width: auto;" : "")">
        <span class="input-group-text" style="@($"width: {LabelWidth}px;")">@Label</span>
        <InputSelect id="@Id"
                     class="form-select"
                     Value="@Value"
                     ValueChanged="ValueChanged"
                     ValueExpression="ValueExpression"
                     @oninput="OnInput"
                     @onfocus="OnFocus"
                     @onblur="OnBlur"
                     @onclick="OnClick"
                     @onchange="OnChange"
                     @onmouseover="OnMouseOver"
                     @onmouseout="OnMouseOut"
                     Disabled="@Disabled">
            @if (ChildContent != null)
            {
                @ChildContent
            }
        </InputSelect>
    </div>
}
else if (InputType == InputType.FloatingLabel)
{
    <div class="@($"form-floating d-{(FitContent ? "inline-block" : "block")} {Class}")">
        <InputSelect id="@Id"
                     class="form-select"
                     Value="@Value"
                     ValueChanged="ValueChanged"
                     ValueExpression="ValueExpression"
                     @oninput="OnInput"
                     @onfocus="OnFocus"
                     @onblur="OnBlur"
                     @onclick="OnClick"
                     @onchange="OnChange"
                     @onmouseover="OnMouseOver"
                     @onmouseout="OnMouseOut"
                     Disabled="@Disabled">
            @if (ChildContent != null)
            {
                @ChildContent
            }
        </InputSelect>
        <label for="@Id">@Label</label>
    </div>
}

@if (EditContext != null)
{
    <ValidationMessage For="@ValueExpression" class="text-danger validation-spacing" />
}

@code {
    [CascadingParameter]
    private EditContext? EditContext { get; set; }

    [Parameter]
    public InputType InputType { get; set; } = InputType.InputGroup;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public required string Label { get; set; }

    [Parameter]
    public ushort LabelWidth { get; set; } = 150;

    [Parameter, EditorRequired]
    public required string Id { get; set; }

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<T?>>? ValueExpression { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnInput { get; set; }

    [Parameter]
    public EventCallback<FocusEventArgs> OnFocus { get; set; }

    [Parameter]
    public EventCallback<FocusEventArgs> OnBlur { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOver { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOut { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool FitContent { get; set; } = false;

    [Parameter, EditorRequired]
    public required RenderFragment ChildContent { get; set; }
}
